---
import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import { SITE_TITLE, SITE_DESCRIPTION } from "../consts";
import { Button } from "free-astro-components";
import { Image } from "astro:assets";
import chshimage from "../../src/content/blog/Chsh-illustration2.png";
import chshimage2 from "../../src/content/blog/chshBases.png";
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
	</head>
	<body>
		<Header />
		<main>
			<div
				style="display:flex; align-items:center; justify-content:center;"
			>
				<h1>CHSH Tinkerer</h1><br />
			</div>
			<div
				style="display:flex; align-items:center; justify-content:center;"
			>
				<h3>Quantum Basics and<br />Entangled Strategies</h3>
			</div>

			<div
				style="display:flex; align-items:center; justify-content:center;"
			>
				<Image
					src={chshimage}
					alt="chsh game"
					width="500"
					height="500"
				/>
			</div>
			<p>
				75% is the best winning probablity we can do with normal tatics. <br
				/>
				However, we can use Quantum Entanglment to increase our chances of
				wining!<br />
				<br />
				&emsp;To give a brief overview, in quantum computing we use particles
				and their spin. The spin of the particle can be in any direction.
				To find the direction we must measure it. To measure we must use
				a measurement basis, a set of 2 unit vectors that are orthogonal
				(perpendicular).
				<br />
				&emsp;When measuring a particle, its spin (state) will always collapse
				into one of the unit vectors (bases). It will most likely collapse
				into a base that is close to its orginal state. If the orignal state
				and the base are the same, it will collapse into it 100% of the time.
				<br /> Entanglement is when two particles are prepared in a certain
				way where their spins are always correlated. For example, they can
				be prepared to always have the same state. If one particle's state
				is change, the other instantelousy changes too. They will demonstrate
				this behavior even when seperated incredibliy far apart. <br />
				We will use this behavior to increase our winning probablity!

				<br /><br />
				For this example, We will use |œà&#10093 = |00&#10093 + |11&#10093
				<br />
			</p>
			<Image src={chshimage2} alt="chsh game" width="500" height="500" />
			<p>
				We will make measurements on this qubit based on what Alex and
				Bob recieve from the Referee.
			</p>
			<div>
				<style>
					.table_component {
						overflow: auto;
						width: 100%;
					}

					.table_component table {
						border: 1px solid #dededf;
						height: 100%;
						width: 100%;
						table-layout: fixed;
						border-collapse: collapse;
						border-spacing: 1px;
						text-align: left;
					}

					.table_component caption {
						caption-side: top;
						text-align: left;
					}

					.table_component th {
						border: 1px solid #dededf;
						background-color: #e4e9ec;
						color: #000000;
						padding: 5px;
					}

					.table_component td {
						border: 1px solid #dededf;
						background-color: #ffffff;
						color: #000000;
						padding: 5px;
					}
				</style>
				<div class="table_component" role="region" tabindex="0">
					<table>
						<caption>Chart of Rotational Difference</caption>
						<thead>
							<tr>
								<th></th>
								<th></th>
								<th>Bob</th>
								<th></th>
							</tr>
						</thead>
						<tbody>
							<tr>
								<th></th>
								<th></th>
								<th>y = 0</th>
								<th>y = 1</th>
							</tr>
							<tr>
								<th>Alice</th>
								<th>x = 0</th>
								<td>+ùùø / 8 </td>
								<td>+ùùø / 8</td>
							</tr>
							<tr>
								<th></th>
								<th>x = 1</th>
								<td>+ùùø / 8</td>
								<td>+3ùùø / 8</td>
							</tr>
						</tbody>
					</table>
					<p>Step 1) Alice recieves x, Bob gets y</p>
					<label for="aliceStrategy">Options:</label>
					<select id="aliceStrategy" name="aliceStrategy">
						<option value="1">a = 0, b = 0</option>
						<option value="2">a = 0, b = 1</option>
						<option value="3" disabled>a = 1, b = 0</option>
						<option value="4" disabled>a = 1, b = 1</option>
					</select>

					<p>
						We will assume that Alice will always measure what we
						choose in this example case, despite it being random
					</p>
					<label for="aliceStrategy"
						>Alice measures Qubit and gets :
					</label>
					<select id="aliceStrategy" name="aliceStrategy">
						<option value="1">|0&#10093</option>
						<option value="2">|1&#10093</option>
						<option value="3" disabled>|+&#10093</option>
						<option value="4" disabled>|-&#10093</option>
					</select>
					
					<p>Press the button to see if you'd succeed!</p><button
						id="randombutton">Test!</button
					>

					<p>
						&#124;B<sub>0</sub>&gt; = cos(&#960;/8)&#124;0&gt;<br />
						&#124;B<sub>1</sub>&gt; = sin(&#960;/8)&#124;0&gt;<br />
						<br />
						Probability Bob collapses to &#124;B<sub>0</sub>&gt; =
						&#124;cos(&#960;/8)&#124;<sup>2</sup> &lt;0 &#124; 0&gt;
						= 0.8536<br />
						Probability Bob collapses to &#124;B<sub>1</sub>&gt; =
						&#124;sin(&#960;/8)&#124;<sup>2</sup> &lt;1 &#124; 1&gt;
						= 0.1464
					</p>

					<script>
						// Alice dropdown alert
						document
							.getElementById("aliceStrategy")
							.addEventListener("change", function () {
								const selectedText =
									this.options[this.selectedIndex].value;
								alert("Alice selected: " + selectedText);
							});
						document
							.getElementById("randombutton")
							.addEventListener("click", () => {
								if (Math.random() < 0.8536) {
									alert("Success");
								} else {
									alert("Fail");
								}
							});
						function hide(id) {
							let thingWeAreHiding =
								document.getElementById("id");
							thingWeAreHiding.style.visibility = "hidden";
						}

						function show(id) {
							let thingWeAreShowing =
								document.getElementById("id");
							thingWeAreShowing.style.visibility = "visible";
						}
					</script>
				</div>
				<br />
				<Footer />
			</div>
			<br />
		</main>
	</body>
</html>
